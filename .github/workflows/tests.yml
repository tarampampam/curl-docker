name: tests

on:
  push:
    branches: [master, main]
    paths-ignore: ['**.md']
    tags-ignore: ['**']
  pull_request:
    paths-ignore: ['**.md']

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs: # Docs: <https://git.io/JvxXE>
  gitleaks:
    name: üîê Check for GitLeaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: {fetch-depth: 0}

      - uses: gacts/gitleaks@v1

  build-image:
    name: üèóÔ∏è Build the docker image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/arm64, linux/amd64]
    steps:
      - uses: actions/checkout@v3

      - name: Setup QEMU
        if: ${{ matrix.platform != 'linux/amd64' }}
        run: sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - uses: actions/cache@v3
        with: {path: /tmp/podman, key: 'podman-${{ runner.os }}-${{ matrix.platform }}'}

      - name: Build with default (distroless) base image
        run: |
          podman --root /tmp/podman build \
            --platform="${{ matrix.platform }}" \
            --tag localhost/curl:default .

      - name: Check is distroless image
        run: |
          podman --root /tmp/podman run --rm --entrypoint '' localhost/curl:default sh && exit 1 || true
          podman --root /tmp/podman run --rm localhost/curl:default --version

      - name: Build with alpine base image
        run: |
          podman --root /tmp/podman build \
            --platform="${{ matrix.platform }}" \
            --build-arg "BASE_IMAGE=docker.io/library/alpine:latest" \
            --tag localhost/curl:alpine .

      - name: Check is alpine image
        run: |
          podman --root /tmp/podman run --rm --entrypoint '' localhost/curl:alpine sh -c 'cat /etc/os-release'
          podman --root /tmp/podman run --rm localhost/curl:alpine --version

      - uses: gacts/github-slug@v1
        id: platform-slug
        with: {to-slug: '${{ matrix.platform }}'}

      - name: Save distroless image
        run: podman --root /tmp/podman save localhost/curl:default > ./curl-default.tar

      - uses: actions/upload-artifact@v3
        with: {name: 'curl-default-${{ steps.platform-slug.outputs.slug }}', path: ./curl-default.tar, retention-days: 1}

      - name: Save alpine image
        run: podman --root /tmp/podman save localhost/curl:alpine > ./curl-alpine.tar

      - uses: actions/upload-artifact@v3
        with: {name: 'curl-alpine-${{ steps.platform-slug.outputs.slug }}', path: ./curl-alpine.tar, retention-days: 1}

  create-manifest:
    name: üèóÔ∏è Create the distroless manifest
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - uses: actions/download-artifact@v3
        with: {name: curl-default-linux-arm64}

      - run: podman load < curl-default.tar

      - uses: actions/download-artifact@v3
        with: {name: curl-default-linux-amd64}

      - run: podman load < curl-default.tar

#  scan-image:
#    name: Scan docker image
#    runs-on: ubuntu-latest
#    needs: [build-image]
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: docker-image
#          path: .artifact
#
#      - working-directory: .artifact
#        run: docker load < docker-image.tar
#
#      - uses: anchore/scan-action@v3 # action page: <https://github.com/anchore/scan-action>
#        with:
#          image: curl:local
#          fail-build: true
#          severity-cutoff: low # negligible, low, medium, high or critical
#
#  try-to-use:
#    name: Use docker image
#    runs-on: ubuntu-latest
#    needs: [build-image]
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: docker-image
#          path: .artifact
#
#      - name: Prepare image to run
#        working-directory: .artifact
#        run: docker load < docker-image.tar
#
#      - name: Try to run (github.com)
#        run: docker run --rm curl:local --fail https://github.com/
#
#      - name: Try to run (1.1.1.1)
#        run: docker run --rm curl:local --fail https://1.1.1.1/
#
#      - name: Try to run (ppa.launchpad.net)
#        run: docker run --rm curl:local --fail http://ppa.launchpad.net/
#
#      - name: Should exit with code 1
#        run: |
#          docker run --rm curl:local --fail "https://httpbin.org/status/401" || ec=$?
#          test $ec -eq 1 && echo "all is ok (code = $ec)" || ( echo "Wrong exit code: $ec"; exit 1 )
