name: tests

on:
  push:
    branches: [master, main]
    paths-ignore: ['**.md']
    tags-ignore: ['**']
  pull_request:
    paths-ignore: ['**.md']

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_IMAGE_NAME: ghcr.io/${{ github.actor }}/curl/cache # GitHub registry
  GITHUB_IMAGE_NAME: ghcr.io/${{ github.actor }}/curl # GitHub registry
  DOCKERHUB_IMAGE_NAME: tarampampam/curl # DockerHub registry

jobs: # Docs: <https://git.io/JvxXE>
  gitleaks:
    name: üîê Check for GitLeaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: {fetch-depth: 0}

      - uses: gacts/gitleaks@v1

  build-image:
    name: üèóÔ∏è Build the docker image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - {platform: linux/amd64, tag-prefix: amd64}
          - {platform: linux/arm64, tag-prefix: arm64}
    steps:
      - uses: actions/checkout@v3

      - name: Login into ghcr.io
        uses: gacts/run-and-post-run@v1
        with:
          run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login -u "${{ github.actor }}" --password-stdin ghcr.io
          post: podman logout ghcr.io

      - name: Setup QEMU
        if: ${{ matrix.platform != 'linux/amd64' }}
        run: sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - {uses: gacts/github-slug@v1, id: slug}

      - run: |
          podman version
          podman build --help

      - name: Build the image
        uses: gacts/run-and-post-run@v1
        env:
          IMAGE_TAG: ${{ matrix.tag-prefix }}-${{ steps.slug.outputs.version }} # (arm|amd)64-<version>
        with:
          run: podman build
            --platform   "${{ matrix.platform }}"
            --cache-from "$CACHE_IMAGE_NAME"
            --cache-to   "$CACHE_IMAGE_NAME"
            --tag        "$GITHUB_IMAGE_NAME:$IMAGE_TAG"
            .
          post: podman push "$GITHUB_IMAGE_NAME:$IMAGE_TAG"

      - name: Build alpine-based image
        uses: gacts/run-and-post-run@v1
        env:
          IMAGE_TAG: ${{ matrix.tag-prefix }}-${{ steps.slug.outputs.version }}-alpine # (arm|amd)64-<version>-alpine
        with:
          run: podman build
            --platform   "${{ matrix.platform }}"
            --cache-from "$CACHE_IMAGE_NAME"
            --cache-to   "$CACHE_IMAGE_NAME"
            --build-arg  "BASE_IMAGE=docker.io/library/alpine:latest"
            --tag        "$GITHUB_IMAGE_NAME:$IMAGE_TAG"
            .
          post: podman push "$GITHUB_IMAGE_NAME:$IMAGE_TAG"

  create-manifest:
    name: üö∂ Create the manifest
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - {uses: gacts/github-slug@v1, id: slug}

      - name: Login into ghcr.io
        uses: gacts/run-and-post-run@v1
        with:
          run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login -u "${{ github.actor }}" --password-stdin ghcr.io
          post: podman logout ghcr.io

      - name: Create the manifest
        uses: gacts/run-and-post-run@v1
        env:
          IMAGE_TAG: ${{ steps.slug.outputs.version }}
        with:
          run: podman manifest create "$GITHUB_IMAGE_NAME:$IMAGE_TAG"
            "$GITHUB_IMAGE_NAME:amd64-${{ steps.slug.outputs.version }}"
            "$GITHUB_IMAGE_NAME:arm64-${{ steps.slug.outputs.version }}"
          post: podman manifest push --all "$GITHUB_IMAGE_NAME:$IMAGE_TAG" "docker://$GITHUB_IMAGE_NAME:$IMAGE_TAG"

#  scan-image:
#    name: Scan docker image
#    runs-on: ubuntu-latest
#    needs: [build-image]
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: docker-image
#          path: .artifact
#
#      - working-directory: .artifact
#        run: docker load < docker-image.tar
#
#      - uses: anchore/scan-action@v3 # action page: <https://github.com/anchore/scan-action>
#        with:
#          image: curl:local
#          fail-build: true
#          severity-cutoff: low # negligible, low, medium, high or critical
#
#  try-to-use:
#    name: Use docker image
#    runs-on: ubuntu-latest
#    needs: [build-image]
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: docker-image
#          path: .artifact
#
#      - name: Prepare image to run
#        working-directory: .artifact
#        run: docker load < docker-image.tar
#
#      - name: Try to run (github.com)
#        run: docker run --rm curl:local --fail https://github.com/
#
#      - name: Try to run (1.1.1.1)
#        run: docker run --rm curl:local --fail https://1.1.1.1/
#
#      - name: Try to run (ppa.launchpad.net)
#        run: docker run --rm curl:local --fail http://ppa.launchpad.net/
#
#      - name: Should exit with code 1
#        run: |
#          docker run --rm curl:local --fail "https://httpbin.org/status/401" || ec=$?
#          test $ec -eq 1 && echo "all is ok (code = $ec)" || ( echo "Wrong exit code: $ec"; exit 1 )

#      - name: Check the image
#        run: |
#          podman --root /tmp/pd run \
#            --rm --entrypoint '' "localhost/curl:${{ steps.image-tag.outputs.slug }}" \
#            sh && exit 1 || true
#          podman --root /tmp/pd run \
#            --rm "localhost/curl:${{ steps.image-tag.outputs.slug }}" \
#            --version
#
#      - name: Check is alpine image
#        run: |
#          podman --root /tmp/pd run \
#            --rm --entrypoint '' "localhost/curl:${{ steps.image-tag.outputs.slug }}-alpine" \
#            sh -c 'cat /etc/os-release'
#          podman --root /tmp/pd run \
#            --rm "localhost/curl:${{ steps.image-tag.outputs.slug }}-alpine" \
#            --version
